%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.3 (Build 18D109) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 572 94
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 572 94
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
348.216 84.047997 m
346.03998 83.919998 344.47202 83.664001 343.51199 83.279999 c
342.552 82.895996 341.896 82.160004 341.54401 81.071999 c
341.19199 79.983994 341.01599 78.224014 341.01599 75.792 c
341.01599 28.176001 l
341.01599 25.743988 341.19199 23.984005 341.54401 22.896 c
341.896 21.807995 342.552 21.072002 343.51199 20.688 c
344.47202 20.303999 346.03998 20.048 348.216 19.92 c
348.216 18 l
345.07999 18.192001 340.21603 18.288 333.62399 18.288 c
327.15997 18.288 322.13602 18.192001 318.552 18 c
318.552 19.92 l
320.664 20.048 322.216 20.303999 323.20801 20.688 c
324.20001 21.072002 324.87201 21.807995 325.224 22.896 c
325.57599 23.984005 325.75201 25.743988 325.75201 28.176001 c
325.75201 51.216 l
300.31201 51.216 l
300.31201 28.176001 l
300.31201 25.743988 300.48801 23.984005 300.84 22.896 c
301.19202 21.807995 301.84799 21.072002 302.80801 20.688 c
303.76801 20.303999 305.336 20.048 307.51199 19.92 c
307.51199 18 l
304.05597 18.192001 299.22403 18.288 293.01599 18.288 c
286.16797 18.288 281.11203 18.192001 277.84799 18 c
277.84799 19.92 l
279.96002 20.048 281.51199 20.303999 282.504 20.688 c
283.496 21.072002 284.168 21.807995 284.51999 22.896 c
284.87201 23.984005 285.048 25.743988 285.048 28.176001 c
285.048 75.792 l
285.048 78.224014 284.87201 79.983994 284.51999 81.071999 c
284.168 82.160004 283.496 82.895996 282.504 83.279999 c
281.51199 83.664001 279.96002 83.919998 277.84799 84.047997 c
277.84799 85.968002 l
281.11203 85.776001 286.16797 85.68 293.01599 85.68 c
299.22403 85.68 304.05597 85.776001 307.51199 85.968002 c
307.51199 84.047997 l
305.336 83.919998 303.76801 83.664001 302.80801 83.279999 c
301.84799 82.895996 301.19202 82.160004 300.84 81.071999 c
300.48801 79.983994 300.31201 78.224014 300.31201 75.792 c
300.31201 53.136002 l
325.75201 53.136002 l
325.75201 75.792 l
325.75201 78.224014 325.57599 79.983994 325.224 81.071999 c
324.87201 82.160004 324.20001 82.895996 323.20801 83.279999 c
322.216 83.664001 320.664 83.919998 318.552 84.047997 c
318.552 85.968002 l
322.13602 85.776001 327.15997 85.68 333.62399 85.68 c
340.21603 85.68 345.07999 85.776001 348.216 85.968002 c
348.216 84.047997 l
h
374.63199 68.975998 m
381.99203 68.975998 387.75198 66.88002 391.91199 62.688 c
396.07202 58.495979 398.15201 51.856045 398.15201 42.768002 c
398.15201 33.679955 396.07202 27.056021 391.91199 22.896 c
387.75198 18.735979 381.99203 16.656 374.63199 16.656 c
367.33597 16.656 361.59201 18.735979 357.39999 22.896 c
353.20798 27.056021 351.112 33.679955 351.112 42.768002 c
351.112 51.856045 353.20798 58.495979 357.39999 62.688 c
361.59201 66.88002 367.33597 68.975998 374.63199 68.975998 c
h
374.63199 67.056 m
371.87997 67.056 369.68802 65.056023 368.056 61.056 c
366.42398 57.055981 365.608 50.960041 365.608 42.768002 c
365.608 34.575958 366.42398 28.496019 368.056 24.528 c
369.68802 20.55998 371.87997 18.576 374.63199 18.576 c
377.44803 18.576 379.65601 20.54398 381.25601 24.48 c
382.85602 28.416019 383.65601 34.511959 383.65601 42.768002 c
383.65601 51.02404 382.84 57.135979 381.20801 61.104 c
379.57599 65.072021 377.384 67.056 374.63199 67.056 c
h
479.28799 26.927999 m
479.28799 24.303988 479.75198 22.496004 480.67999 21.504 c
481.608 20.511995 483.19199 20.016001 485.43201 20.016001 c
485.43201 18 l
479.03198 18.256001 474.80801 18.384001 472.76001 18.384001 c
470.96799 18.384001 467.00003 18.256001 460.85599 18 c
460.85599 20.016001 l
462.58401 20.016001 463.784 20.495995 464.45599 21.455999 c
465.12799 22.416004 465.46399 24.239986 465.46399 26.927999 c
465.46399 56.784 l
465.46399 59.472012 465.064 61.471992 464.26401 62.784 c
463.46399 64.096008 461.944 64.751999 459.70401 64.751999 c
457.336 64.751999 455.272 63.76001 453.51199 61.776001 c
451.75198 59.791988 450.71201 57.360016 450.392 54.48 c
450.392 26.927999 l
450.392 24.303988 450.79199 22.496004 451.59201 21.504 c
452.392 20.511995 453.84799 20.016001 455.95999 20.016001 c
455.95999 18 l
449.81598 18.256001 445.784 18.384001 443.86401 18.384001 c
442.07199 18.384001 438.10403 18.256001 431.95999 18 c
431.95999 20.016001 l
433.68802 20.016001 434.888 20.511995 435.56 21.504 c
436.23199 22.496004 436.56799 24.303988 436.56799 26.927999 c
436.56799 56.784 l
436.56799 59.472012 436.216 61.471992 435.51199 62.784 c
434.80798 64.096008 433.43201 64.751999 431.384 64.751999 c
428.82397 64.751999 426.63202 63.680012 424.80801 61.535999 c
422.98398 59.391991 422.07199 56.752014 422.07199 53.616001 c
422.07199 26.927999 l
422.07199 24.303988 422.40799 22.496004 423.07999 21.504 c
423.75201 20.511995 424.952 20.016001 426.67999 20.016001 c
426.67999 18 l
421.04797 18.256001 417.272 18.384001 415.35199 18.384001 c
413.43198 18.384001 409.01602 18.256001 402.104 18 c
402.104 20.016001 l
404.40802 20.016001 406.008 20.511995 406.90399 21.504 c
407.80002 22.496004 408.24799 24.303988 408.24799 26.927999 c
408.24799 57.167999 l
408.24799 60.112015 407.80002 62.255993 406.90399 63.599998 c
406.008 64.944008 404.40802 65.615997 402.104 65.615997 c
402.104 67.632004 l
404.15201 67.440002 406.13599 67.344002 408.056 67.344002 c
413.75201 67.344002 418.42398 67.791992 422.07199 68.688004 c
422.07199 60.048 l
424.888 66.000031 429.84796 68.975998 436.952 68.975998 c
441.81601 68.975998 445.336 67.728012 447.51199 65.232002 c
448.728 63.951992 449.52798 62.032013 449.91199 59.472 c
451.57602 62.928017 453.75198 65.375992 456.44 66.816002 c
459.12802 68.256004 462.26398 68.975998 465.84799 68.975998 c
470.71204 68.975998 474.23199 67.728012 476.40799 65.232002 c
477.43201 64.079994 478.168 62.512009 478.616 60.528 c
479.064 58.543991 479.28799 55.952015 479.28799 52.751999 c
479.28799 26.927999 l
h
515.20801 24.528 m
520.45605 24.528 524.67999 27.087975 527.88 32.208 c
529.60797 31.632 l
528.328 27.471979 526.04004 23.936014 522.74402 21.024 c
519.448 18.111986 515.336 16.656 510.40799 16.656 c
503.62396 16.656 498.23203 18.815979 494.23199 23.136 c
490.23199 27.456022 488.23199 33.839958 488.23199 42.287998 c
488.23199 50.928043 490.37598 57.535976 494.664 62.112 c
498.95203 66.688026 504.64798 68.975998 511.75201 68.975998 c
523.78406 68.975998 529.79999 61.87207 529.79999 47.664001 c
502.82401 47.664001 l
502.76001 46.703995 502.728 45.200008 502.728 43.152 c
502.728 38.927979 503.32001 35.408012 504.504 32.591999 c
505.68802 29.775986 507.224 27.728006 509.112 26.448 c
511 25.167994 513.03198 24.528 515.20801 24.528 c
h
511.17599 66.959999 m
508.87198 66.959999 506.96802 65.536011 505.46399 62.688 c
503.95999 59.839985 503.01599 55.440029 502.63199 49.487999 c
517.70398 49.487999 l
517.83197 54.544025 517.336 58.719982 516.216 62.015999 c
515.09601 65.312019 513.41602 66.959999 511.17599 66.959999 c
h
552.37598 68.975998 m
554.80798 68.975998 557.04797 68.672005 559.09601 68.064003 c
561.14398 67.455994 562.71198 66.768005 563.79999 66 c
564.44 65.551994 565.01599 65.328003 565.52802 65.328003 c
566.104 65.328003 566.59998 65.631996 567.01599 66.239998 c
567.43201 66.848 567.70398 67.727997 567.83197 68.879997 c
569.84802 68.879997 l
569.59198 65.615982 569.46399 59.984039 569.46399 51.984001 c
567.448 51.984001 l
566.87201 56.208019 565.60803 59.743984 563.65601 62.591999 c
561.70398 65.440018 558.87201 66.863998 555.15997 66.863998 c
553.23999 66.863998 551.65601 66.320007 550.40802 65.232002 c
549.15997 64.143997 548.53601 62.640011 548.53601 60.720001 c
548.53601 58.543987 549.27197 56.672009 550.74402 55.104 c
552.216 53.535992 554.51996 51.632011 557.65601 49.391998 c
560.44 47.375999 l
564.34399 44.431984 567.224 41.80801 569.08002 39.504002 c
570.93604 37.199989 571.86401 34.320019 571.86401 30.864 c
571.86401 28.047985 571.04803 25.552011 569.41602 23.375999 c
567.784 21.199989 565.59204 19.536005 562.84003 18.384001 c
560.08801 17.231995 557.04803 16.656 553.71997 16.656 c
550.20001 16.656 547.19202 17.327993 544.69598 18.672001 c
542.64801 19.696005 541.17603 20.367998 540.28003 20.688 c
539.64001 20.880001 539.08002 20.672003 538.59998 20.063999 c
538.12 19.455997 537.75201 18.544006 537.49597 17.327999 c
535.47998 17.327999 l
535.73602 20.976019 535.86401 27.375954 535.86401 36.528 c
537.88 36.528 l
539.16003 24.751942 543.47998 18.864 550.84003 18.864 c
552.69598 18.864 554.27997 19.423994 555.59198 20.544001 c
556.90399 21.664005 557.56 23.375988 557.56 25.68 c
557.56 27.47201 557.16003 29.071993 556.35999 30.48 c
555.56 31.888006 554.552 33.135994 553.336 34.223999 c
552.12 35.312004 550.29602 36.81599 547.86401 38.736 c
544.98401 41.040012 542.79199 42.895992 541.28802 44.304001 c
539.784 45.712006 538.50403 47.375992 537.448 49.296001 c
536.39197 51.216011 535.86401 53.359989 535.86401 55.728001 c
535.86401 59.82402 537.46399 63.055988 540.664 65.424004 c
543.86401 67.792015 547.76801 68.975998 552.37598 68.975998 c
h
W
0 0 572 94 rc
272.84799 90.968002 m
576.86401 90.968002 l
576.86401 11.656 l
272.84799 11.656 l
h
f
Q
q
60.363998 26.063999 m
61.196003 23.95199 62.155994 22.416004 63.243999 21.455999 c
64.332008 20.495995 65.387993 19.984001 66.412003 19.92 c
66.412003 18 l
62.57198 18.192001 57.708031 18.288 51.82 18.288 c
45.291965 18.288 40.428017 18.192001 37.228001 18 c
37.228001 19.92 l
39.660011 20.048 41.387997 20.351997 42.411999 20.832001 c
43.436005 21.312002 43.948002 22.16 43.948002 23.375999 c
43.948002 24.528006 43.564003 26.06399 42.796001 27.983999 c
37.035999 43.728001 l
16.108 43.728001 l
13.612 37.104 l
11.819991 32.495975 10.924 28.944012 10.924 26.448 c
10.924 24.079988 11.643992 22.432005 13.084 21.504 c
14.524007 20.575994 16.651985 20.048 19.468 19.92 c
19.468 18 l
15.115978 18.192001 11.148018 18.288 7.5640001 18.288 c
4.6199851 18.288 2.1880095 18.192001 0.26800001 18 c
0.26800001 19.92 l
3.4040158 20.496002 6.1559882 23.855968 8.5240002 30 c
30.412001 86.160004 l
31.116003 86.096001 32.235992 86.064003 33.771999 86.064003 c
35.308006 86.064003 36.395996 86.096001 37.035999 86.160004 c
60.363998 26.063999 l
h
36.363998 45.647999 m
26.860001 71.568001 l
16.875999 45.647999 l
36.363998 45.647999 l
h
85.627998 26.927999 m
85.627998 24.303988 86.075996 22.496004 86.972 21.504 c
87.868004 20.511995 89.467987 20.016001 91.772003 20.016001 c
91.772003 18 l
85.115967 18.256001 80.828011 18.384001 78.907997 18.384001 c
76.731987 18.384001 72.316032 18.256001 65.660004 18 c
65.660004 20.016001 l
67.900009 20.016001 69.483994 20.511995 70.412003 21.504 c
71.340004 22.496004 71.804001 24.303988 71.804001 26.927999 c
71.804001 81.648003 l
71.804001 84.592018 71.340004 86.735992 70.412003 88.080002 c
69.483994 89.424004 67.900009 90.096001 65.660004 90.096001 c
65.660004 92.112 l
67.708008 91.919998 69.691994 91.823997 71.612 91.823997 c
77.180031 91.823997 81.851982 92.271996 85.627998 93.167999 c
85.627998 26.927999 l
h
128.364 68.975998 m
131.69202 68.975998 134.65199 68.080009 137.244 66.288002 c
139.83601 64.495995 141.868 61.808018 143.34 58.223999 c
144.81201 54.63998 145.548 50.256027 145.548 45.071999 c
145.548 35.919952 143.54802 28.896025 139.548 24 c
135.54797 19.103975 130.12404 16.656 123.276 16.656 c
121.35599 16.656 119.54801 16.911997 117.852 17.424 c
116.15599 17.936003 114.7 18.703995 113.484 19.728001 c
113.484 10.128 l
113.484 7.311986 114.188 5.3600054 115.596 4.2719998 c
117.00401 3.1839945 119.17999 2.6400001 122.124 2.6400001 c
122.124 0.62400001 l
119.532 0.72000003 l
112.42796 0.91200095 107.91601 1.008 105.996 1.008 c
104.07599 1.008 100.04403 0.88000131 93.900002 0.62400001 c
93.900002 2.6400001 l
96.012009 2.6400001 97.499992 3.1039953 98.363998 4.0320001 c
99.228004 4.9600048 99.660004 6.6719875 99.660004 9.1680002 c
99.660004 57.167999 l
99.660004 60.112015 99.196007 62.255993 98.267998 63.599998 c
97.339996 64.944008 95.756012 65.615997 93.515999 65.615997 c
93.515999 67.632004 l
95.564011 67.440002 97.547989 67.344002 99.468002 67.344002 c
105.03603 67.344002 109.70798 67.791992 113.484 68.688004 c
113.484 59.855999 l
114.828 62.800014 116.77998 65.055992 119.34 66.624001 c
121.90001 68.192009 124.90798 68.975998 128.364 68.975998 c
h
119.532 19.247999 m
123.62802 19.247999 126.57199 21.27998 128.364 25.344 c
130.15601 29.40802 131.052 35.34396 131.052 43.152 c
131.052 50.960037 130.332 56.527985 128.892 59.855999 c
127.452 63.184017 125.38802 64.848 122.7 64.848 c
120.52399 64.848 118.58801 64.112007 116.892 62.639999 c
115.19599 61.167992 114.06001 59.120014 113.484 56.495998 c
113.484 21.84 l
115.02 20.111992 117.03599 19.247999 119.532 19.247999 c
h
168.98801 60.048 m
171.86801 66.000031 177.08397 68.975998 184.636 68.975998 c
189.62802 68.975998 193.14799 67.728012 195.196 65.232002 c
196.28401 64.015991 197.06799 62.432011 197.548 60.48 c
198.028 58.527988 198.26801 55.952015 198.26801 52.751999 c
198.26801 26.927999 l
198.26801 24.303988 198.71599 22.496004 199.612 21.504 c
200.50801 20.511995 202.10799 20.016001 204.412 20.016001 c
204.412 18 l
197.75597 18.256001 193.53201 18.384001 191.74001 18.384001 c
189.564 18.384001 185.40404 18.256001 179.25999 18 c
179.25999 20.016001 l
181.18001 20.016001 182.524 20.511995 183.29201 21.504 c
184.06 22.496004 184.444 24.303988 184.444 26.927999 c
184.444 56.784 l
184.444 59.408012 184.01201 61.391994 183.14799 62.736 c
182.284 64.080009 180.73201 64.751999 178.492 64.751999 c
175.80399 64.751999 173.548 63.712009 171.724 61.632 c
169.89999 59.551991 168.98801 56.912018 168.98801 53.712002 c
168.98801 26.927999 l
168.98801 24.303988 169.37199 22.496004 170.14 21.504 c
170.908 20.511995 172.25198 20.016001 174.172 20.016001 c
174.172 18 l
168.02797 18.256001 164.06001 18.384001 162.26801 18.384001 c
160.092 18.384001 155.67604 18.256001 149.02 18 c
149.02 20.016001 l
151.26001 20.016001 152.84399 20.511995 153.772 21.504 c
154.70001 22.496004 155.164 24.303988 155.164 26.927999 c
155.164 81.552002 l
155.164 84.496017 154.70001 86.639992 153.772 87.984001 c
152.84399 89.328003 151.26001 90 149.02 90 c
149.02 92.015999 l
151.06801 91.823997 153.05199 91.727997 154.972 91.727997 c
160.54002 91.727997 165.21198 92.175995 168.98801 93.071999 c
168.98801 60.048 l
h
218.53999 17.327999 m
214.44398 17.327999 211.38802 18.383989 209.37199 20.496 c
207.35599 22.608011 206.34801 25.391983 206.34801 28.848 c
206.34801 31.728014 207.09999 34.111992 208.604 36 c
210.108 37.888008 211.93199 39.343994 214.076 40.368 c
216.22002 41.392006 218.95598 42.479996 222.284 43.632 c
225.80402 44.848007 228.37999 45.951996 230.01199 46.944 c
231.64401 47.936005 232.46001 49.29599 232.46001 51.023998 c
232.46001 58.512001 l
232.46001 61.200012 231.83601 63.295994 230.588 64.800003 c
229.34 66.304008 227.40401 67.056 224.78 67.056 c
221.70798 67.056 219.37201 66.28801 217.772 64.751999 c
219.56401 64.112 220.95599 63.152008 221.948 61.872002 c
222.94 60.591995 223.436 59.088009 223.436 57.360001 c
223.436 55.18399 222.70001 53.456005 221.228 52.175999 c
219.756 50.895992 217.964 50.256001 215.85201 50.256001 c
213.61198 50.256001 211.884 50.959991 210.668 52.368 c
209.452 53.776009 208.84399 55.535988 208.84399 57.647999 c
208.84399 59.44001 209.276 60.959995 210.14 62.208 c
211.004 63.456005 212.33199 64.623993 214.12399 65.711998 c
215.85201 66.736008 217.97998 67.535995 220.508 68.112 c
223.03601 68.688004 225.80399 68.975998 228.812 68.975998 c
231.94801 68.975998 234.66798 68.656006 236.972 68.015999 c
239.27602 67.375999 241.196 66.28801 242.73199 64.751999 c
244.14001 63.343994 245.084 61.616009 245.564 59.568001 c
246.04401 57.519989 246.284 54.736019 246.284 51.216 c
246.284 25.104 l
246.284 23.567993 246.42799 22.480003 246.716 21.84 c
247.004 21.199997 247.564 20.879999 248.396 20.879999 c
249.356 20.879999 250.508 21.423994 251.85201 22.511999 c
252.812 20.879999 l
249.93199 18.511988 246.41202 17.327999 242.252 17.327999 c
238.73198 17.327999 236.26801 18.031994 234.86 19.440001 c
233.452 20.848007 232.716 22.735989 232.65199 25.104 c
229.45198 19.919973 224.74803 17.327999 218.53999 17.327999 c
h
225.93201 23.472 m
228.42801 23.472 230.60399 24.783987 232.46001 27.408001 c
232.46001 47.088001 l
231.692 45.807995 230.06001 44.400009 227.564 42.863998 c
225.06799 41.263992 223.18001 39.664009 221.89999 38.063999 c
220.62 36.463993 219.98 34.160015 219.98 31.152 c
219.98 28.527987 220.524 26.592007 221.612 25.344 c
222.70001 24.095993 224.13998 23.472 225.93201 23.472 c
h
W
0 0 572 94 rc
-4.7319999 98.167999 m
257.81201 98.167999 l
257.81201 -4.3759999 l
-4.7319999 -4.3759999 l
h
f
ep
end
%%Trailer
%%EOF
